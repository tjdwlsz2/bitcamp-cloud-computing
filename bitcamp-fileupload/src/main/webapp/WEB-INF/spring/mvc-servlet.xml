<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    
    <context:component-scan base-package="bitcamp.mvc.web"/>
    
    <!-- MVC 관련 애노테이션을 처리할 객체들을 자동 등록한다. 
         matrix variable 기능을 사용하고 싶으면 다음과 같이 활성화시켜라!
    -->
    <mvc:annotation-driven enable-matrix-variables="true">
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	          <property name="objectMapper">
	             <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                    <property name="dateFormat">
                        <bean class="java.text.SimpleDateFormat">
                            <constructor-arg value="yyyy-MM-dd"/>
                        </bean>
                    </property>
	             </bean>
	          </property>
	        </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    
    <!-- Spring WebMVC의 기본 뷰 리졸버를 교체한다.
         => JSP URL의 앞뒤 경로를 미리 설정해두면 페이지 컨트롤러에서 
            view URL을 지정하기 쉽다.  
    -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
	    <property name="prefix" value="/WEB-INF/jsp/"/>
	    <property name="suffix" value=".jsp"/>
	</bean>
	
	<!-- 멀티파트 요청 파라미터 값을  처리할 객체를 등록해야만 파일 업로드를 수행할 수 있다.
	   => CommonsMultipartResolver 객체는 Apache의 commons-fileupload 
	      라이브러리를 사용하기 때문에 반드시 해당 라이브러리를 추가해야 한다.
	   => Servlet 3.0에 추가된 API를 사용한다면 CommonMultipartResolver를
	       따로 추가할 필요가 없다. 물론 commons-fileupload 라이브러리도 필요 없다.
	       단, web.xml의 프론트 컨트롤러에 <multipart-config> 설정을 추가해야 한다.
	-->
	<!--  
	<bean id="multipartResolver" 
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
          <property name="maxUploadSize" value="3000000"/>
          <property name="maxInMemorySize" value="1000000"/>
    </bean>
    -->


</beans>













